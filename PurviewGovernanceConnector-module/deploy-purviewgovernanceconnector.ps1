#!/usr/bin/env pwsh
<#
.SYNOPSIS
Deploy PurviewGovernanceConnector Module

.DESCRIPTION
Deploys the PurviewGovernanceConnector plugin module to Power Platform with enterprise security.

.NOTES
Generated by Plugin Generator on 2025-07-22 09:19:04
#>

param(
    [string]$Environment = "de96b383-5f31-4895-9b41-88f3b7435919",
    [switch]$UseSecureConnector = $true
)

Write-Host "üõ°Ô∏è Deploying PurviewGovernanceConnector Module" -ForegroundColor Cyan
Write-Host "======================================" -ForegroundColor Cyan

# Function to deploy connector
function Deploy-PurviewGovernanceConnectorConnector {
    Write-Host "
üîå Deploying Power Platform connector..." -ForegroundColor Green
    
    try {
        # Check authentication
        $authStatus = pac auth list
        if (-not $authStatus) {
            Write-Host "   ‚ùå Not authenticated to Power Platform" -ForegroundColor Red
            Write-Host "   üí° Run: pac auth create --url https://org29f8dd94.crm.dynamics.com/" -ForegroundColor Yellow
            return $false
        }
        
        # Deploy connector
        if ($UseSecureConnector) {
            Write-Host "   üîê Using secure connector with Key Vault..." -ForegroundColor Green
            $result = pac connector create --api-definition-file "connector-definition-secure.json" --api-properties-file "connector-properties-secure.json"
        } else {
            Write-Host "   üîå Using standard connector..." -ForegroundColor Green
            $result = pac connector create --api-definition-file "connector-definition.json" --api-properties-file "connector-properties.json"
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ PurviewGovernanceConnector connector deployed successfully!" -ForegroundColor Green
            
            # Extract connector ID from output
            $connectorId = ($result | Select-String "Connector created with ID (.+)" -AllMatches).Matches[0].Groups[1].Value
            if ($connectorId) {
                Write-Host "   üÜî Connector ID: $connectorId" -ForegroundColor White
                Write-Host "   üåê Manage: https://make.powerapps.com/environments/$Environment/customconnectors/$connectorId" -ForegroundColor White
            }
            
            return $true
        } else {
            Write-Host "   ‚ùå Connector deployment failed" -ForegroundColor Red
            return $false
        }
        
    } catch {
        Write-Host "   ‚ùå Deployment error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to test connector
function Test-PurviewGovernanceConnectorConnector {
    Write-Host "
üß™ Testing connector functionality..." -ForegroundColor Green
    
    try {
        # Test health endpoint
        $healthUrl = "https://copilot-plugin-func-f46zzw7hhsh2q.azurewebsites.net/api/purviewgovernanceconnector/health"
        $response = Invoke-RestMethod -Uri $healthUrl -Method GET -TimeoutSec 10
        
        if ($response.status -eq "healthy") {
            Write-Host "   ‚úÖ Health check passed" -ForegroundColor Green
            return $true
        } else {
            Write-Host "   ‚ùå Health check failed" -ForegroundColor Red
            return $false
        }
        
    } catch {
        Write-Host "   ‚ùå Health check error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to show next steps
function Show-NextSteps {
    Write-Host "
üìã Next Steps for PurviewGovernanceConnector" -ForegroundColor Cyan
    Write-Host "=============================" -ForegroundColor Cyan
    
    Write-Host "
1. üîß Test Your Connector:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Open Power Platform: https://make.powerapps.com/environments/$Environment/customconnectors" -ForegroundColor White
    Write-Host "   ‚Ä¢ Find 'PurviewGovernanceConnector' connector" -ForegroundColor White
    Write-Host "   ‚Ä¢ Click 'Test' tab and create a test connection" -ForegroundColor White
    
    Write-Host "
2. üéØ Create Flows:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Power Automate: https://make.powerautomate.com/" -ForegroundColor White
    Write-Host "   ‚Ä¢ Use 'PurviewGovernanceConnector' connector in new flows" -ForegroundColor White
    Write-Host "   ‚Ä¢ Available operations: 6 endpoints" -ForegroundColor White
    
    Write-Host "
3. üì± Build Apps:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Power Apps: https://make.powerapps.com/" -ForegroundColor White
    Write-Host "   ‚Ä¢ Add 'PurviewGovernanceConnector' as data source" -ForegroundColor White
    Write-Host "   ‚Ä¢ Integrate with your app logic" -ForegroundColor White
    
    Write-Host "
4. ü§ñ M365 Copilot Integration:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Operations available in M365 Copilot context" -ForegroundColor White
    Write-Host "   ‚Ä¢ Test with natural language queries" -ForegroundColor White
    Write-Host "   ‚Ä¢ Category: Governance & Compliance" -ForegroundColor White
}

# Main deployment execution
function Main {
    Write-Host "
üéØ Starting PurviewGovernanceConnector deployment..." -ForegroundColor Green
    
    # Deploy connector
    $connectorDeployed = Deploy-PurviewGovernanceConnectorConnector
    if (-not $connectorDeployed) {
        Write-Host "
‚ùå Deployment failed!" -ForegroundColor Red
        return
    }
    
    # Test connector
    $connectorTested = Test-PurviewGovernanceConnectorConnector
    if (-not $connectorTested) {
        Write-Host "
‚ö†Ô∏è  Connector deployed but health check failed" -ForegroundColor Yellow
    }
    
    # Show next steps
    Show-NextSteps
    
    Write-Host "
üéâ PurviewGovernanceConnector deployment complete!" -ForegroundColor Green
    Write-Host "üõ°Ô∏è Your PurviewGovernanceConnector plugin is ready to use!" -ForegroundColor Green
}

# Execute deployment
Main
